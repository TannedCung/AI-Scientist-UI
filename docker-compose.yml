version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: ai-scientist-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ai-scientist-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-scientist-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - R2_ENDPOINT_URL=${R2_ENDPOINT_URL}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID}
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - S2_API_KEY=${S2_API_KEY}
      - HOST=${HOST}
      - PORT=${PORT}
      - LOG_LEVEL=${LOG_LEVEL}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL}
      - MAX_NUM_GENERATIONS=${MAX_NUM_GENERATIONS}
      - NUM_REFLECTIONS=${NUM_REFLECTIONS}
      - EXECUTION_TIMEOUT=${EXECUTION_TIMEOUT}
    networks:
      - ai-scientist-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-scientist-frontend
    environment:
      - NEXT_PUBLIC_API_URL=https://paper_generator.tannedcung.com/api
    ports:
      - "3010:3000"
    depends_on:
      - backend
    networks:
      - ai-scientist-network

  nginx:
    image: nginx:alpine
    container_name: ai-scientist-nginx
    ports:
      - "82:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
    networks:
      - ai-scientist-network

volumes:
  postgres_data:

networks:
  ai-scientist-network:
    driver: bridge 